================================================================================
INTRODUCTION                                                           *sg.nvim*

sg.nvim is a plugin for interfacing with Sourcegraph and Cody

To configure logging in:

- Log in on your Sourcegraph instance.
- Click your user menu in the top right, then select Settings > Access tokens.
- Create your access token, and then run `:SourcegraphLogin` in your neovim
  editor after installation.
- Type in the link to your Sourcegraph instance (for example:
  `https://sourcegraph.com`)
- And then paste in your access token.

An alternative to this is to use the environment variables specified for
[src-cli](https://github.com/sourcegraph/src-cli#log-into-your-sourcegraph-instance).

You can check that you're logged in by then running `:checkhealth sg`

M.setup({opts})                                                    *M.setup()*
    Setup sourcegraph


    Parameters: ~
        {opts} (sg.config)



================================================================================
SETUP                                                                 *sg.setup*

Config options for sg.nvim

All options can be set via

>lua
  require("sg").setup { ... }
<

Other configuration notes:
- To configure options for the prompt, you can use `ftplugin/cody_prompt.lua`
- To configure options for the history, you can use `ftplugin/cody_history.lua`

sg.config                                                          *sg.config*


  Configuration Options: ~
    {download_binaries}   (boolean)                    Default true, download
                                                       latest release from
                                                       Github
    {node_executable}     (string)                     path to node executable
    {cody_agent}          (string)                     path to the cody-agent
                                                       js bundle
    {did_change_debounce} (number)                     Number of ms to
                                                       debounce changes
    {on_attach}           (function)                   function to run when
                                                       attaching to
                                                       sourcegraph buffers
    {auth_strategy}       (SourcegraphAuthStrategy[])  Ordering for auth
                                                       strategies.



================================================================================
AUTH                                                                   *sg.auth*

How to manage authentication for Sourcegraph within Neovim (both for Cody and
for Sourcegraph)


M.strategies()                                          *sg.auth.strategies()*
    The default strategies for sg.nvim. Use |config.auth_strategy| to configure
    the order of evaluation. Whichever one returns a valid configuration first
    will be used when starting and connecting to Sourcegraph and Cody.

    Auth Strategy: `"environment-variables"`
    Use the environment variables `SRC_ENDPOINT` and `SRC_ACCESS_TOKEN` to
    determine which instance to connect to

    Auth Strategy: `"nvim"`
    Create a custom configuration for neovim.

    Auth Strategy: `"cody-app"`
    Use the Cody App configuration to connect to your sourcegraph instance. See
    https://sourcegraph.com/get-cody for more information




M.get({ordering})                                              *sg.auth.get()*
    Get the highest priority active auth configuration. By default loads the
    ordering from the user config.



    Parameters: ~
        {ordering} (SourcegraphAuthStrategy[]?)

    Return: ~
        SourcegraphAuthConfig?
        SourcegraphAuthStrategy?


M.set_nvim_auth({opts})                              *sg.auth.set_nvim_auth()*
    Set the nvim auth. Will optionally prompt user for auth if nothing is
    passed.


    Parameters: ~
        {opts} (SourcegraphAuthConfig?)



================================================================================
COMMANDS                                                         *cody.commands*

Default commands for interacting with Cody

                                                                    *:CodyAsk*
:CodyAsk ~
    Ask a question about the current selection.

    Use from visual mode to pass the current selection

                                                                   *:CodyChat*
:CodyChat {title} ~
    State a new cody chat, with an optional {title}

                                                                 *:CodyToggle*
:CodyToggle ~
    Toggles the current Cody Chat window.

                                                                   *:CodyTask*
:CodyTask {task_description} ~
    Instruct Cody to perform a task on selected text.

                                                                     *:CodyDo*
:CodyDo ~
    @deprecated DEPRECATED. Use CodyTask.

                                                               *:CodyTaskView*
:CodyTaskView ~
    Opens the last active CodyTask.

                                                             *:CodyTaskAccept*
:CodyTaskAccept ~
    Accepts the current CodyTask, removing it from the pending tasks list and
    applying it to the selection the task was performed on. Can also be
    triggered by pressing <CR> while a task is open.

                                                               *:CodyTaskPrev*
:CodyTaskPrev ~
    Cycles to the previous CodyTask. Navigates to the appropriate buffer
    location.

                                                               *:CodyTaskNext*
:CodyTaskNext ~
    Cycles to the next CodyTask. Navigates to the appropriate buffer location.

                                                                *:CodyRestart*
:CodyRestart ~
    Restarts Cody and Sourcegraph, clearing all state.

    Useful if you've re-authenticated or are testing your config




================================================================================
LUA-COMMANDS                                                 *cody.lua-commands*

commands.ask({message})                               *sg.cody.commands.ask()*
    Ask Cody a question, without any selection


    Parameters: ~
        {message} (string)


commands.ask_range({bufnr}, {start_line}, {end_line}, {message}) *sg.cody.commands.ask_range()*
    Ask Cody about the selected code


    Parameters: ~
        {bufnr}      (number)
        {start_line} (number)
        {end_line}   (number)
        {message}    (string)


commands.autocomplete({request}, {callback}) *sg.cody.commands.autocomplete()*
    Send an autocomplete request


    Parameters: ~
        {request}  ({ filename: string, row: number, col: number }?)
        {callback} (function(data: CodyAutocompleteResult))


commands.float({bufnr}, {start_line}, {end_line}, {message}) *sg.cody.commands.float()*
    Ask Cody about the selected code


    Parameters: ~
        {bufnr}      (number)
        {start_line} (number)
        {end_line}   (number)
        {message}    (string)


commands.chat({name})                                *sg.cody.commands.chat()*
    Start a new CodyChat


    Parameters: ~
        {name} (string?)

    Return: ~
        CodyLayoutSplit


commands.do_task({bufnr}, {start_line}, {end_line}, {message}) *sg.cody.commands.do_task()*
    Ask Cody to preform a task on the selected code.


    Parameters: ~
        {bufnr}      (number)
        {start_line} (number)
        {end_line}   (number)
        {message}    (string)


commands.history()                                *sg.cody.commands.history()*
    Open a selection to get an existing Cody conversation



commands.add_context({start_line}, {end_line}, {state}) *sg.cody.commands.add_context()*
    Add context to an existing state


    Parameters: ~
        {start_line} (any)
        {end_line}   (any)
        {state}      (CodyState?)


commands.focus_history()                    *sg.cody.commands.focus_history()*
    Focus the currently active history window.

    Can be set to a keymap by:
    >lua
      vim.keymap.set('n', '<leader>ch', function()
        require("sg.cody.commands").focus_history()
      end)
<



commands.focus_prompt()                      *sg.cody.commands.focus_prompt()*
    Focus the currently active prompt.

    Can be set to a keymap by:
    >lua
      vim.keymap.set('n', '<leader>cp', function()
        require("sg.cody.commands").focus_prompt()
      end)
<




================================================================================
COMMANDS                                                           *sg.commands*

Default commands for interacting with Sourcegraph

                                                           *:SourcegraphLogin*
:SourcegraphLogin ~
    Get prompted for endpoint and access_token if you don't want to set them
    via environment variables.

                                                           *:SourcegraphBuild*
:SourcegraphBuild ~
    Rebuild the Sourcegraph crates and required dependencies (in case build
    failed during installation)

                                                *:SourcegraphDownloadBinaries*
:SourcegraphDownloadBinaries ~
    (Re-)Download the sourcegraph binaries. This should happen during
    installation but you can force redownloading the binaries this way to
    ensure that sg.nvim is properly installed.

                                                            *:SourcegraphLink*
:SourcegraphLink ~
    Get a sourcegraph link to the current repo + file + line. Automatically
    adds it to your '+' register

                                                          *:SourcegraphSearch*
:SourcegraphSearch ~
    Run a search. For more sourcegraph search syntax, refer to online
    documentation




================================================================================
RPC                                                                     *sg.rpc*

rpc.complete({snippet}, {opts})                            *sg.rpc.complete()*
    Complete a single string snippet



    Parameters: ~
        {snippet} (string)               Code to send as the prompt
        {opts}    ({ prefix: string? })

    Return: ~
        string?: The error
        string?: The completion


rpc.repository({name})                                   *sg.rpc.repository()*
    Get the repository ID for a repo with a name


    Parameters: ~
        {name} (string)

    Return: ~
        string?: The error, if any
        string?: The repository ID, if found


rpc.embeddings({repo}, {query}, {opts})                  *sg.rpc.embeddings()*
    Get embeddings for the a repo & associated query.


    Parameters: ~
        {repo}  (string)  Repo name (github.com/neovim/neovim)
        {query} (any)     query string (the question you want to ask)
        {opts}  (table)   `code`: number of code results, `text`: number of
                          text results

    Return: ~
        string?: err, if any
        table?: list of embeddings


rpc.get_entry({path})                                     *sg.rpc.get_entry()*
    Get an SgEntry based on a path


    Parameters: ~
        {path} (string)

    Return: ~
        string?: err, if any
        SgEntry?: entry, if any


rpc.get_file_contents({remote}, {oid}, {path})    *sg.rpc.get_file_contents()*
    Get file contents for a sourcegraph file


    Parameters: ~
        {remote} (string)
        {oid}    (string)
        {path}   (string)

    Return: ~
        string?: err, if any
        string[]?: contents, if successful


rpc.get_directory_contents({remote}, {oid}, {path}) *sg.rpc.get_directory_contents()*
    Get directory contents for a sourcegraph directory


    Parameters: ~
        {remote} (string)
        {oid}    (string)
        {path}   (string)

    Return: ~
        string?: err, if any
        SgEntry[]?: contents, if successful


rpc.get_search({query})                                  *sg.rpc.get_search()*
    Get search results


    Parameters: ~
        {query} (string)

    Return: ~
        string?: err, if any
        SgSearchResult[]?: contents, if successful


rpc.get_info()                                             *sg.rpc.get_info()*
    Get info about current sourcegraph info


    Return: ~
        string?: err, if any
        table?: contents, if successful


rpc.get_link()                                             *sg.rpc.get_link()*
    Get info about current sourcegraph info


    Return: ~
        string?: err, if any
        table?: contents, if successful



================================================================================
COMPLETE                                                         *cody.complete*

Completion source for nvim-cmp.

To enable, add `"cody"` to your nvim-cmp sources.

Optionally, you can trigger Cody Completions manually by doing:

>lua
  require("cmp").setup {
    mapping = {
      ...,
      -- Manually trigger cody completions
      ["<c-a>"] = cmp.mapping.complete {
        config = {
          sources = {
            { name = "cody" },
          },
        },
      },
    },
  }
<

You can add formatting via the `formatting` field in nvim-cmp. For example,
here's how you could configure if you're using `lspkind`:

>lua
  require('cmp').setup {
    ...,
    formatting = {
      format = lspkind.cmp_format {
        with_text = true,
        menu = {
          nvim_lsp = "[LSP]",
          ...,
          cody = "[cody]",
        },
      },
    }
  }
<

See |cmp-config.sources| for more information




 vim:tw=78:ts=8:ft=help:norl:
